<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Shermans's Notes</title><link>https://shermanrose.uk/knowledge/programming/golang/</link><description>Recent content in Go on Shermans's Notes</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://shermanrose.uk/knowledge/programming/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang - Basics</title><link>https://shermanrose.uk/knowledge/programming/golang/go-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shermanrose.uk/knowledge/programming/golang/go-basics/</guid><description>Basic Language Usage Basic things to remember while bouncing around lanaguages
Slices / Arrays Arrays exist in Golang and can be created manually:
However nearly all usages of arrays are through slices, which are built on top of arrays, providing a view in to a backing array.
Some things to keep in mind:
Changing a value in a slice changes the value in the backing array Ranges can be used on slices: slice[1:5], slice[:2], slice[2:] A slice can be resized to reflect more or less of the underlaying array, through assignment: slice = slice[:cap(slice)] Resizing a slice past the capacity of the array will throw a panic Compose Literals You can define an array of basic types use a compose literal like so:</description></item><item><title>Golang - Types</title><link>https://shermanrose.uk/knowledge/programming/golang/go-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shermanrose.uk/knowledge/programming/golang/go-types/</guid><description>Structs Basics Similar to C/C++, you can declare custom types :
1 2 3 type Tuple struct { X, Y, Z, W float64 } You can also declare an alias to a type:
1 2 3 type Foo String var bar Foo = &amp;#34;FooString&amp;#34; However, it is essential to note that Foo and string are now two different types. Since 1.9, you are able to tell the compiler that a type alias is just another name but should be considered the same type overall.</description></item><item><title>Testing in Golang</title><link>https://shermanrose.uk/knowledge/programming/golang/go-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shermanrose.uk/knowledge/programming/golang/go-testing/</guid><description>Table Driven Tests Asserting with Testify Testing Suites Testing Env Vars Testing flag Table Driven Tests Table-driven tests format your tests to ensure that you are as DRY as possible while making it easy to add more test cases. There are plenty of resources about this, which I will link below; however, here is my appreciation.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package testing import ( &amp;#34;github.</description></item></channel></rss>