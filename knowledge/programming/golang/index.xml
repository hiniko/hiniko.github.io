<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Shermans's Notes</title><link>https://shermanrose.uk/knowledge/programming/golang/</link><description>Recent content in Go on Shermans's Notes</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://shermanrose.uk/knowledge/programming/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang - Basics</title><link>https://shermanrose.uk/knowledge/programming/golang/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shermanrose.uk/knowledge/programming/golang/basics/</guid><description>Basic Language Usage Basic things to remember while bouncing around lanaguages
Slices / Arrays Arrays exist in Golang and can be created manually:
However nearly all usages of arrays are through slices, which are built on top of arrays, providing a view in to a backing array.
Some things to keep in mind:
Changing a value in a slice changes the value in the backing array Ranges can be used on slices: slice[1:5], slice[:2], slice[2:] A slice can be resized to reflect more or less of the underlaying array, through assignment: slice = slice[:cap(slice)] Resizing a slice past the capacity of the array will throw a panic Compose Literals You can define an array of basic types use a compose literal like so:</description></item><item><title>Golang - Types</title><link>https://shermanrose.uk/knowledge/programming/golang/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shermanrose.uk/knowledge/programming/golang/types/</guid><description>Types in golang (Stack Overflow Answer)[https://stackoverflow.com/a/47399371]
Similar to C/C++ you can declare types
type Tuple struct { X, Y, Z, W float64 } You can also decalre alias
type Foo String var bar Foo = &amp;#34;FooString&amp;#34; However it is important to note that Foo and string are now two different types. Since 1.9 you are able to tell the compiler that a type alias is just another name but should be considered the same type overall.</description></item></channel></rss>