<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>integration-test on Shermans's Notes</title><link>https://shermanrose.uk/tags/integration-test/</link><description>Recent content in integration-test on Shermans's Notes</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://shermanrose.uk/tags/integration-test/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing in Golang</title><link>https://shermanrose.uk/knowledge/programming/golang/go-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shermanrose.uk/knowledge/programming/golang/go-testing/</guid><description>Table Driven Tests Table-driven tests format your tests to ensure that you are being as DRY as possible while making it easy to add more test cases. There are plenty of resources about this, which I will link below; however, here is my appreciation.
package testing import ( &amp;#34;github.com/stretchr/testify/assert&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;testing&amp;#34; ) func TestFoo(t *testing.T){ tests := map[string]struct{ in string expect []string }{ &amp;#34;splits a list at &amp;#39;:&amp;#39;&amp;#34;: { in: &amp;#34;foo:bar:baz&amp;#34;, expect: []string{&amp;#34;foo&amp;#34;, &amp;#34;bar&amp;#34;, &amp;#34;baz&amp;#34;}, }, &amp;#34;does not split a list at &amp;#39;-&amp;#39;&amp;#34;: { in: &amp;#34;foo-bar:baz&amp;#34;, expect: []string{&amp;#34;foo-bar&amp;#34;, &amp;#34;baz&amp;#34;}, }, } for name, data := range tests { t.</description></item></channel></rss>